import { z } from 'zod';
import type { LogLevel, Overrides, RuntimeEnumsStyle, Serializer } from '../generator';
import { ArrayExpressionNode, ExtendsClauseNode, GenericExpressionNode, IdentifierNode, InferClauseNode, LiteralNode, Logger, MappedTypeNode, ObjectExpressionNode, RawExpressionNode, UnionExpressionNode } from '../generator';
import type { DateParser, NumericParser } from '../introspector';
import { DatabaseMetadata, IntrospectorDialect } from '../introspector';
export type Config = {
    camelCase?: boolean;
    customImports?: CustomImports;
    dateParser?: DateParser;
    defaultSchemas?: string[];
    dialect?: DialectName;
    domains?: boolean;
    envFile?: string;
    excludePattern?: string | null;
    includePattern?: string | null;
    logger?: Logger;
    logLevel?: LogLevel;
    numericParser?: NumericParser;
    outFile?: string | null;
    overrides?: Overrides;
    partitions?: boolean;
    print?: boolean;
    runtimeEnums?: boolean | RuntimeEnumsStyle;
    serializer?: Serializer;
    singularize?: boolean | Record<string, string>;
    skipAutogeneratedFileComment?: boolean;
    typeMapping?: Record<string, string>;
    typeOnlyImports?: boolean;
    url?: string;
    verify?: boolean;
};
export type CustomImports = Record<string, string>;
export type DialectName = z.infer<typeof dialectNameSchema>;
export declare const dialectNameSchema: z.ZodEnum<{
    "kysely-bun-sqlite": "kysely-bun-sqlite";
    "bun-sqlite": "bun-sqlite";
    clickhouse: "clickhouse";
    libsql: "libsql";
    mssql: "mssql";
    mysql: "mysql";
    postgres: "postgres";
    sqlite: "sqlite";
    "worker-bun-sqlite": "worker-bun-sqlite";
}>;
export declare const configSchema: z.ZodObject<{
    camelCase: z.ZodOptional<z.ZodBoolean>;
    customImports: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    dateParser: z.ZodOptional<z.ZodEnum<{
        string: "string";
        timestamp: "timestamp";
    }>>;
    defaultSchemas: z.ZodOptional<z.ZodArray<z.ZodString>>;
    dialect: z.ZodOptional<z.ZodEnum<{
        "kysely-bun-sqlite": "kysely-bun-sqlite";
        "bun-sqlite": "bun-sqlite";
        clickhouse: "clickhouse";
        libsql: "libsql";
        mssql: "mssql";
        mysql: "mysql";
        postgres: "postgres";
        sqlite: "sqlite";
        "worker-bun-sqlite": "worker-bun-sqlite";
    }>>;
    domains: z.ZodOptional<z.ZodBoolean>;
    envFile: z.ZodOptional<z.ZodString>;
    excludePattern: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    includePattern: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    logger: z.ZodOptional<z.ZodCustom<Logger, Logger>>;
    logLevel: z.ZodOptional<z.ZodEnum<{
        error: "error";
        debug: "debug";
        silent: "silent";
        warn: "warn";
        info: "info";
    }>>;
    numericParser: z.ZodOptional<z.ZodEnum<{
        string: "string";
        number: "number";
        "number-or-string": "number-or-string";
    }>>;
    outFile: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    overrides: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        columns: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodCustom<ArrayExpressionNode, ArrayExpressionNode>, z.ZodCustom<ExtendsClauseNode, ExtendsClauseNode>, z.ZodCustom<GenericExpressionNode, GenericExpressionNode>, z.ZodCustom<IdentifierNode, IdentifierNode>, z.ZodCustom<InferClauseNode, InferClauseNode>, z.ZodCustom<LiteralNode<string | number>, LiteralNode<string | number>>, z.ZodCustom<MappedTypeNode, MappedTypeNode>, z.ZodCustom<ObjectExpressionNode, ObjectExpressionNode>, z.ZodCustom<RawExpressionNode, RawExpressionNode>, z.ZodCustom<UnionExpressionNode, UnionExpressionNode>, z.ZodString]>>>;
    }, z.core.$strip>>>;
    partitions: z.ZodOptional<z.ZodBoolean>;
    print: z.ZodOptional<z.ZodBoolean>;
    runtimeEnums: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodEnum<{
        "screaming-snake-case": "screaming-snake-case";
        "pascal-case": "pascal-case";
    }>]>>;
    serializer: z.ZodOptional<z.ZodObject<{
        serializeFile: z.ZodFunction<z.ZodTuple<[z.ZodCustom<DatabaseMetadata, DatabaseMetadata>, z.ZodCustom<IntrospectorDialect, IntrospectorDialect>, z.ZodOptional<z.ZodObject<{
            camelCase: z.ZodOptional<z.ZodBoolean>;
            customImports: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            defaultSchemas: z.ZodOptional<z.ZodArray<z.ZodString>>;
            overrides: z.ZodOptional<z.ZodOptional<z.ZodObject<{
                columns: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodCustom<ArrayExpressionNode, ArrayExpressionNode>, z.ZodCustom<ExtendsClauseNode, ExtendsClauseNode>, z.ZodCustom<GenericExpressionNode, GenericExpressionNode>, z.ZodCustom<IdentifierNode, IdentifierNode>, z.ZodCustom<InferClauseNode, InferClauseNode>, z.ZodCustom<LiteralNode<string | number>, LiteralNode<string | number>>, z.ZodCustom<MappedTypeNode, MappedTypeNode>, z.ZodCustom<ObjectExpressionNode, ObjectExpressionNode>, z.ZodCustom<RawExpressionNode, RawExpressionNode>, z.ZodCustom<UnionExpressionNode, UnionExpressionNode>, z.ZodString]>>>;
            }, z.core.$strip>>>;
            typeMapping: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        }, z.core.$strip>>], null>, z.ZodString>;
    }, z.core.$strip>>;
    singularize: z.ZodOptional<z.ZodUnion<readonly [z.ZodBoolean, z.ZodRecord<z.ZodString, z.ZodString>]>>;
    skipAutogeneratedFileComment: z.ZodOptional<z.ZodBoolean>;
    typeMapping: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    typeOnlyImports: z.ZodOptional<z.ZodBoolean>;
    url: z.ZodOptional<z.ZodString>;
    verify: z.ZodOptional<z.ZodBoolean>;
}, z.core.$strip>;
